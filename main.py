import logging as _l
import os as _o
import base64 as _b
from aiogram import Bot as _B, Dispatcher as _D, types as _t
from aiogram.types import InlineKeyboardMarkup as _IKM, InlineKeyboardButton as _IKB, InlineQueryResultArticle as _IQRA, InputTextMessageContent as _ITMC
from aiogram.utils import executor as _e

# –û–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
_x1 = _b.b64decode(b'ODA5NzMxMTk5MzpBQUhjemtCUHVWd3B5Q0xLWkhwejlBc2JzOWgxeVM1U3hkcw==').decode()
_x2 = [int('0x4b2e5437', 16), int('0x1dbb7e36', 16), int('0x1a0f9e08', 16)]

_l.basicConfig(level=_l.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
_lg = _l.getLogger(__name__)

_bot = _B(token=_o.getenv('TELEGRAM_BOT_TOKEN', _x1))
_dp = _D(_bot)

def _check(uid: int) -> bool:
    return uid in _x2

_ads = {
    'pub': {
        't': 'üî• **VoIP-—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞**',
        'c': 'üè¢ **–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è IP-–ê–¢–°** ‚Äî —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 70% –Ω–∞ —Å–≤—è–∑–∏!\n\nüìû –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å, CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\nüí∏ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ! –ù–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.\n\nüëâ **–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞**'
    },
    'prv': {
        't': 'üìû VoIP-—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è',
        'c': 'üî• **–î–µ—à–µ–≤–∞—è —Å–≤—è–∑—å –¥–ª—è –±–∏–∑–Ω–µ—Å–∞**\n\nüì± IP-—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞\nüí∞ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ\n\nüëâ **–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º**'
    }
}

@_dp.message_handler(commands=['start'])
async def _h1(msg: _t.Message):
    if not _check(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        _lg.warning(f"Unauthorized access attempt from user {msg.from_user.id}")
        return
    
    _lg.info(f"User {msg.from_user.id} accessed the bot")
    await msg.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã VoIP —É—Å–ª—É–≥!\n\n"
        "üî∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º: –Ω–∞–ø–∏—à–∏—Ç–µ @appexadsbot –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n"
        "üî∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "üî∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É —Å –∫–Ω–æ–ø–∫–∞–º–∏\n\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ads - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
    )

@_dp.inline_handler()
async def _h2(iq: _t.InlineQuery):
    if not _check(iq.from_user.id):
        _lg.warning(f"Unauthorized inline query from user {iq.from_user.id}")
        return
    
    _res = []
    
    for k, v in _ads.items():
        _kb = _IKM(row_width=1)
        _kb.add(
            _IKB("üåê –ù–∞—à —Å–∞–π—Ç", url="https://appex-telecom.com/"),
            _IKB("üí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/maysonco")
        )
        
        _res.append(
            _IQRA(
                id=k,
                title=v['t'],
                input_message_content=_ITMC(
                    message_text=v['c'],
                    parse_mode='Markdown'
                ),
                reply_markup=_kb,
                description=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {k} –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            )
        )
    
    await _bot.answer_inline_query(iq.id, _res, cache_time=1)
    _lg.info(f"Served {len(_res)} ads to user {iq.from_user.id} for query: '{iq.query}'")

@_dp.message_handler(content_types=['text'])
async def _h3(msg: _t.Message):
    if not _check(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        _lg.warning(f"Unauthorized access attempt from user {msg.from_user.id}")
        return
    
    await msg.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º: –Ω–∞–ø–∏—à–∏—Ç–µ @appexadsbot –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã!")

@_dp.message_handler(commands=['help'])
async def _h4(msg: _t.Message):
    if not _check(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await msg.reply(
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —á–∞—Ç –≤ Telegram\n"
        "2Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ @appexadsbot –∏ –ø—Ä–æ–±–µ–ª\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É —Å –∫–Ω–æ–ø–∫–∞–º–∏!\n\n"
        "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –∏ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É"
    )

@_dp.message_handler(commands=['ads'])
async def _h5(msg: _t.Message):
    if not _check(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    _txt = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**\n\n"
    for k, v in _ads.items():
        _txt += f"**{k.upper()}:**\n{v['c']}\n\n"
    
    await msg.reply(_txt, parse_mode='Markdown')

@_dp.errors_handler()
async def _h6(upd: _t.Update, exc: Exception):
    _lg.error(f"Error occurred: {exc}")
    return True

async def _start(dp):
    _bi = await _bot.get_me()
    _lg.info("Bot started successfully!")
    _lg.info(f"Bot info: @{_bi.username} ({_bi.first_name})")

async def _stop(dp):
    _lg.info("Bot stopped")

if __name__ == '__main__':
    _e.start_polling(_dp, skip_updates=True, on_startup=_start, on_shutdown=_stop)
